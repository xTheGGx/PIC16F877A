#include <16f877a.h>
#fuses HS,NOWDT,NOPROTECT,NOPUT,NOLVP,BROWNOUT 
#use delay(clock=20M)
#use standard_io(D)
#use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7)

// Definición de pines para el LCD
#define LCD_DB4   PIN_D4
#define LCD_DB5   PIN_D5
#define LCD_DB6   PIN_D6
#define LCD_DB7   PIN_D7
#define LCD_RS    PIN_D2
#define LCD_E     PIN_D3
#include <LCD_16X2.c>  // Librería para el manejo de la pantalla LCD

// Definición de pines para el sensor de temperatura y el ventilador
#define TEMP_SENSOR_PIN PIN_A0
#define FAN_PIN PIN_B0
#define LAMP_PIN PIN_B1
#define DHT11_PIN PIN_B2

char message1[] = "Temp = 00.0 C  ";
char message2[] = "RH   = 00.0 %  ";
short Time_out = 0;
unsigned int8 T_byte1, T_byte2, RH_byte1, RH_byte2, CheckSum ;

char grade[8] = {0x07, 0x05, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00};
float temperatura;
float lectura;
float voltaje;
float conversion;
int percent;

void start_signal(){
  output_drive(DHT11_PIN);                            // Configure connection pin as output
  output_low(DHT11_PIN);                              // Connection pin output low
  delay_ms(25);
  output_high(DHT11_PIN);                             // Connection pin output high
  delay_us(30);
  output_float(DHT11_PIN);                            // Configure connection pin as input
}

short check_response(){
  set_timer1(0);                                      // Set Timer1 value to 0
  setup_timer_1(T1_INTERNAL | T1_DIV_BY_4);           // Start Timer1 with internal clock source + 2 prescaler
  while(!input(DHT11_PIN) && get_timer1() < 100);     // Wait until DHT11_PIN becomes high (cheking of 80µs low time response)
  if(get_timer1() > 99)                               // If response time > 99µS  ==> Response error
    return 0;                                         // Return 0 (Device has a problem with response)
  else{
    set_timer1(0);                                    // Set Timer1 value to 0
    while(input(DHT11_PIN) && get_timer1() < 100);    // Wait until DHT11_PIN becomes low (cheking of 80µs high time response)
    if(get_timer1() > 99)                             // If response time > 99µS  ==> Response error
      return 0;                                       // Return 0 (Device has a problem with response)
    else
      return 1;                                       // Return 1 (response OK)
  }
}

unsigned int8 Read_Data(){
  unsigned int8 i, _data = 0;
  if(Time_out)
    break;
  for(i = 0; i < 8; i++){
    set_timer1(0);                                    // Set Timer1 value to 0
    while(!input(DHT11_PIN))                          // Wait until DHT11_PIN becomes high
      if(get_timer1() > 100){                         // If low time > 100  ==>  Time out error (Normally it takes 50µs)
        Time_out = 1;
        break;
      }
    set_timer1(0);                                    // Set Timer1 value to 0
    while(input(DHT11_PIN))                           // Wait until DHT11_PIN becomes low
      if(get_timer1() > 100){                         // If high time > 100  ==>  Time out error (Normally it takes 26-28µs for 0 and 70µs for 1)
        Time_out = 1;
        break;
      }
     if(get_timer1() > 50)                            // If high time > 50  ==>  Sensor sent 1 
       bit_set(_data, (7 - i));                       // Set bit (7 - i)
  }
  return _data;
}

void tempControl(){
      // Leer el valor del sensor de temperatura
      setup_oscillator(OSC_20MHZ);  
      set_adc_channel(0); // Selecciona el canal AN0 (PIN_A0)
      delay_us(20); // Espera el tiempo de adquisición del ADC

      lectura = read_adc(); // Lee el valor del ADC
      // Convertir el valor ADC a temperatura (suponiendo un LM35)
      printf("%f \n", lectura);
      temperatura = (lectura * 2); // Conversión para LM35
      // Mostrar la temperatura en el LCD
      lcd_gotoxy(1,1); // Columna 1, Fila 1
      printf(lcd_putc, "Temp: %0.2f C", temperatura);
      lcd_gotoxy(12,1);
      CGRAM_putc(0);
      // Controlar el ventilador basado en la temperatura
      if (temperatura > 30.0) { // Umbral de temperatura (30 grados Celsius)
         printf("Encendiendo ventilador");
         output_high(FAN_PIN); // Enciende el ventilador
      } else {
         printf("Apagando Ventilador");
         output_low(FAN_PIN); // Apaga el ventilador
      }

      delay_ms(150);
}

void lightControl(){
   set_adc_channel(1);
   delay_us(20);
   lectura = read_adc();
   voltaje = (lectura * 0.0200098913771142);
   conversion = (voltaje*100)/4.98;
   percent = 100 - conversion;
     
   lcd_gotoxy(1,1);
   printf(lcd_putc, "Luz:  %3u%% ", percent);
   if (percent < 30.0) { // Umbral de LUZ (30 PERCENT)
      printf("Encendiendo lampara");
      output_high(LAMP_PIN); // Enciende el ventilador
   } else {
      printf("Apagando lampara");
      output_low(LAMP_PIN); // Apaga el ventilador
   }
   delay_ms(500);
}

void main() {
   // Inicialización del ADC y el LCD
   lcd_init();
   setup_adc(adc_clock_internal);
   setup_adc_ports(all_analog);
   CGRAM_position(0);
   CGRAM_create_char(grade);
   // Configuración del pin del ventilador como salida
   set_tris_b(0x20); // Establece RB0 como salida (0) y los demás como entrada (1)
   setup_timer_1(T1_DISABLED);                         // Disable Timer1

   while(true) {

      //tempControl();
      //lightControl();
      delay_ms(1000);                                   // Wait 1s
       Time_out = 0;
       Start_signal();                                   // Send start signal to the sensor
       if(check_response()){                             // Check if there is a response from sensor (If OK start reding humidity and temperature data)
         RH_byte1 = Read_Data();                         // read RH byte1
         RH_byte2 = Read_Data();                         // read RH byte2
         T_byte1  = Read_Data();                         // read T byte1
         T_byte2  = Read_Data();                         // read T byte2
         Checksum = Read_Data();                         // read checksum
         setup_timer_1(T1_DISABLED);                     // Disable Timer1
         if(Time_out) {                                  // If there is a time out in reading
           lcd_putc('\f');                               // LCD clear
           lcd_gotoxy(5, 1);                             // Go to column 5 row 1
           lcd_putc("Time out!");                        // Display "Time out!"
         }
         else {                                          // If there is no time out
           if(CheckSum == ((RH_Byte1 + RH_Byte2 + T_Byte1 + T_Byte2) & 0xFF)){
             message1[7]  = T_Byte1/10  + 48;
             message1[8]  = T_Byte1%10  + 48;
             message1[10] = T_Byte2/10  + 48;
             message2[7]  = RH_Byte1/10 + 48;
             message2[8]  = RH_Byte1%10 + 48;
             message2[10] = RH_Byte2/10 + 48;
             message1[11] = 223;                         // Degree symbol   
             lcd_gotoxy(1, 1);                           // Go to column 1 row 1
             printf(lcd_putc, message1);                 // Display message1
             lcd_gotoxy(1, 2);                           // Go to column 1 row 2
             printf(lcd_putc, message2);                 // Display message2
           }
           else {
             lcd_putc('\f');                             // LCD clear
             lcd_gotoxy(1, 1);                           // Go to column 1 row 1
             lcd_putc("Checksum Error!");
           }
         }
       }
       else {                                            // If there is no response from DHT11
         lcd_putc('\f');                                 // LCD clear
         lcd_gotoxy(3, 1);                               // Go to column 3 row 1
         lcd_putc("No response");
         lcd_gotoxy(1, 2);                               // Go to column 1 row 2
         lcd_putc("from the sensor");
       }
     }
   }


