CCS PCM C Compiler, Version 5.015, 5967               07-may.-24 18:20

               Filename:   C:\Users\USER\Documents\GitHub\PIC16F877A\Prácticas\Práctica08\e6.lst

               ROM used:   553 words (7%)
                           Largest free fragment is 2048
               RAM used:   9 (2%) at main() level
                           12 (3%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0F4
0003:  NOP
.................... #include <16f877.h> //BIBLIOTECA DEL PROCESADOR 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA A0,24
0005:  DATA 6E,3A
0006:  DATA F2,37
0007:  DATA E4,3A
0008:  DATA FA,31
0009:  DATA 61,10
000A:  DATA 75,37
000B:  DATA 61,10
000C:  DATA 6F,38
000D:  DATA E3,34
000E:  DATA 6F,37
000F:  DATA 3A,10
0010:  DATA 8A,06
0011:  DATA 00,00
0012:  DATA 20,2A
0013:  DATA 6F,32
0014:  DATA EF,39
0015:  DATA 20,36
0016:  DATA EF,39
0017:  DATA 20,31
0018:  DATA 69,3A
0019:  DATA 73,10
001A:  DATA 61,38
001B:  DATA E1,33
001C:  DATA 61,32
001D:  DATA EF,39
001E:  DATA 20,05
001F:  DATA 0D,00
0020:  DATA 20,2A
0021:  DATA 6F,32
0022:  DATA EF,39
0023:  DATA 20,36
0024:  DATA EF,39
0025:  DATA 20,31
0026:  DATA 69,3A
0027:  DATA 73,10
0028:  DATA 65,37
0029:  DATA E3,32
002A:  DATA 6E,32
002B:  DATA 69,32
002C:  DATA EF,39
002D:  DATA 8A,06
002E:  DATA 00,01
002F:  DATA A0,21
0030:  DATA 6F,39
0031:  DATA F2,34
0032:  DATA ED,34
0033:  DATA 65,37
0034:  DATA F4,37
0035:  DATA 20,34
0036:  DATA E1,31
0037:  DATA E9,30
0038:  DATA 20,36
0039:  DATA 61,10
003A:  DATA E4,32
003B:  DATA F2,32
003C:  DATA 63,34
003D:  DATA 61,10
003E:  DATA 8A,06
003F:  DATA 00,01
0040:  DATA A0,21
0041:  DATA 6F,39
0042:  DATA F2,34
0043:  DATA ED,34
0044:  DATA 65,37
0045:  DATA F4,37
0046:  DATA 20,34
0047:  DATA E1,31
0048:  DATA E9,30
0049:  DATA 20,36
004A:  DATA 61,10
004B:  DATA 69,3D
004C:  DATA F1,3A
004D:  DATA E9,32
004E:  DATA 72,32
004F:  DATA 61,10
0050:  DATA 8A,06
0051:  DATA 00,01
0052:  DATA A0,21
0053:  DATA 6F,39
0054:  DATA F2,34
0055:  DATA ED,34
0056:  DATA 65,37
0057:  DATA F4,37
0058:  DATA 20,34
0059:  DATA E1,31
005A:  DATA E9,30
005B:  DATA 20,36
005C:  DATA 61,10
005D:  DATA E4,32
005E:  DATA F2,32
005F:  DATA 63,34
0060:  DATA 61,10
0061:  DATA 79,10
0062:  DATA 61,10
0063:  DATA EC,30
0064:  DATA A0,34
0065:  DATA FA,38
0066:  DATA F5,34
0067:  DATA 65,39
0068:  DATA E4,30
0069:  DATA 20,05
006A:  DATA 0D,00
006B:  DATA 20,2A
006C:  DATA 6F,32
006D:  DATA EF,39
006E:  DATA 20,36
006F:  DATA EF,39
0070:  DATA 20,31
0071:  DATA 69,3A
0072:  DATA 73,10
0073:  DATA 65,37
0074:  DATA E3,32
0075:  DATA 6E,32
0076:  DATA 69,32
0077:  DATA EF,39
0078:  DATA 20,05
0079:  DATA 0D,00
007A:  DATA 20,2A
007B:  DATA 6F,32
007C:  DATA EF,39
007D:  DATA 20,36
007E:  DATA EF,39
007F:  DATA 20,36
0080:  DATA 65,32
0081:  DATA 73,10
0082:  DATA 61,38
0083:  DATA E1,33
0084:  DATA 61,32
0085:  DATA EF,39
0086:  DATA 20,05
0087:  DATA 0D,00
0088:  MOVF   0B,W
0089:  MOVWF  24
008A:  BCF    0B.7
008B:  BSF    03.5
008C:  BSF    03.6
008D:  BSF    0C.7
008E:  BSF    0C.0
008F:  NOP
0090:  NOP
0091:  BCF    03.5
0092:  BCF    03.6
0093:  BTFSC  24.7
0094:  BSF    0B.7
0095:  BSF    03.6
0096:  MOVF   0C,W
0097:  ANDLW  7F
0098:  BTFSC  03.2
0099:  GOTO   0DE
009A:  BCF    03.6
009B:  MOVWF  24
009C:  BSF    03.6
009D:  MOVF   0D,W
009E:  BCF    03.6
009F:  MOVWF  25
00A0:  BSF    03.6
00A1:  MOVF   0F,W
00A2:  BCF    03.6
00A3:  MOVWF  26
00A4:  MOVF   24,W
00A5:  BTFSS  0C.4
00A6:  GOTO   0A5
00A7:  MOVWF  19
00A8:  MOVF   25,W
00A9:  BSF    03.6
00AA:  MOVWF  0D
00AB:  BCF    03.6
00AC:  MOVF   26,W
00AD:  BSF    03.6
00AE:  MOVWF  0F
00AF:  BCF    03.6
00B0:  MOVF   0B,W
00B1:  MOVWF  27
00B2:  BCF    0B.7
00B3:  BSF    03.5
00B4:  BSF    03.6
00B5:  BSF    0C.7
00B6:  BSF    0C.0
00B7:  NOP
00B8:  NOP
00B9:  BCF    03.5
00BA:  BCF    03.6
00BB:  BTFSC  27.7
00BC:  BSF    0B.7
00BD:  BSF    03.6
00BE:  RLF    0C,W
00BF:  RLF    0E,W
00C0:  ANDLW  7F
00C1:  BTFSC  03.2
00C2:  GOTO   0DE
00C3:  BCF    03.6
00C4:  MOVWF  24
00C5:  BSF    03.6
00C6:  MOVF   0D,W
00C7:  BCF    03.6
00C8:  MOVWF  25
00C9:  BSF    03.6
00CA:  MOVF   0F,W
00CB:  BCF    03.6
00CC:  MOVWF  26
00CD:  MOVF   24,W
00CE:  BTFSS  0C.4
00CF:  GOTO   0CE
00D0:  MOVWF  19
00D1:  MOVF   25,W
00D2:  BSF    03.6
00D3:  MOVWF  0D
00D4:  BCF    03.6
00D5:  MOVF   26,W
00D6:  BSF    03.6
00D7:  MOVWF  0F
00D8:  INCF   0D,F
00D9:  BTFSC  03.2
00DA:  INCF   0F,F
00DB:  BCF    03.6
00DC:  GOTO   088
00DD:  BSF    03.6
00DE:  BCF    03.6
00DF:  RETURN
....................  
.................... #list 
....................  
.................... #fuses HS,NOPROTECT, //USAMOS EL OSCILADOR, LA MEMORIA PUEDE SER REESCRITA SIN RESTRICCIONES 
.................... #use delay(clock=20000000) //frecuencia del oscilador para los retardos 
00E0:  MOVLW  25
00E1:  MOVWF  04
00E2:  BCF    03.7
00E3:  MOVF   00,W
00E4:  BTFSC  03.2
00E5:  GOTO   0F3
00E6:  MOVLW  06
00E7:  MOVWF  78
00E8:  CLRF   77
00E9:  DECFSZ 77,F
00EA:  GOTO   0E9
00EB:  DECFSZ 78,F
00EC:  GOTO   0E8
00ED:  MOVLW  7B
00EE:  MOVWF  77
00EF:  DECFSZ 77,F
00F0:  GOTO   0EF
00F1:  DECFSZ 00,F
00F2:  GOTO   0E6
00F3:  RETURN
.................... #use rs232(baud=38400, xmit=PIN_C6, rcv=PIN_C7)//tx y rx configuracion despues del baudrate para permitir el flujo de informacion en puerto C 
.................... #org 0x1F00, 0x1FFF void loader16F877(void) {} //for the 8k 16F876/7 bootloader 
*
1F00:  RETURN
.................... void main(){ //MAIN 
*
00F4:  MOVF   03,W
00F5:  ANDLW  1F
00F6:  MOVWF  03
00F7:  MOVLW  20
00F8:  BSF    03.5
00F9:  MOVWF  19
00FA:  MOVLW  A6
00FB:  MOVWF  18
00FC:  MOVLW  90
00FD:  BCF    03.5
00FE:  MOVWF  18
00FF:  BSF    03.5
0100:  BSF    1F.0
0101:  BSF    1F.1
0102:  BSF    1F.2
0103:  BCF    1F.3
0104:  BCF    03.7
....................   char c; //DECLARAMOS LA VARIABLE QUE LEERÁ EL INPUT DEL TECLADO 
....................   int dato, i; //DECLARAMOS DATO (SALIDA DE LOS LEDS) E I (CONTADOR DE LOS FOR) 
....................    
....................   while(1){ //CICLO 
....................     printf(" Introduzca una opcion: \n\r"); //se envia el mensaje en la hiperterminal 
0105:  MOVLW  04
0106:  BCF    03.5
0107:  BSF    03.6
0108:  MOVWF  0D
0109:  MOVLW  00
010A:  MOVWF  0F
010B:  BCF    03.6
010C:  CALL   088
....................     //printf(" 0. Todos los bits apagados\n\r"); //se envia el mensaje en la hiperterminal 
....................     //printf(" 1. Todos los bits encendidos\n\r"); //se envia el mensaje en la hiperterminal 
....................     //printf(" 2. Corrimiento hacia la derecha \n\r"); //se envia el mensaje en la hiperterminal 
....................     //printf(" 3. Corrimiento hacia la izquierda \n\r"); //se envia el mensaje en la hiperterminal 
....................     //printf(" 4. Corrimiento hacia la derecha y a la izquierda \n\r"); //se envia el mensaje en la hiperterminal 
....................     //printf(" 5. Apagar y encender todos los bits. \n\r"); //se envia el mensaje en la hiperterminal 
....................     c = getch(); //LEEMOS EL INPUT DEL TECLADO 
010D:  BTFSS  0C.5
010E:  GOTO   10D
010F:  MOVF   1A,W
0110:  MOVWF  21
....................     if (c == '0'){ //SE TECLEA 0: 
0111:  MOVF   21,W
0112:  SUBLW  30
0113:  BTFSS  03.2
0114:  GOTO   128
....................       output_b(0x00); //se pone en 0  
0115:  BSF    03.5
0116:  CLRF   06
0117:  BCF    03.5
0118:  CLRF   06
....................       printf(" Todos los bits apagados \n\r"); //se envia el mensaje en la hiperterminal 
0119:  MOVLW  12
011A:  BSF    03.6
011B:  MOVWF  0D
011C:  MOVLW  00
011D:  MOVWF  0F
011E:  BCF    03.6
011F:  CALL   088
....................       delay_ms(1000); // se hace una espera de 1 segundo 
0120:  MOVLW  04
0121:  MOVWF  24
0122:  MOVLW  FA
0123:  MOVWF  25
0124:  CALL   0E0
0125:  DECFSZ 24,F
0126:  GOTO   122
....................     } 
0127:  GOTO   225
....................     else if (c == '1'){ //SE TECLEA 1: 
0128:  MOVF   21,W
0129:  SUBLW  31
012A:  BTFSS  03.2
012B:  GOTO   140
....................       output_b(0xFF); //se pone en 0  
012C:  BSF    03.5
012D:  CLRF   06
012E:  MOVLW  FF
012F:  BCF    03.5
0130:  MOVWF  06
....................       printf(" Todos los bits encendidos\n\r"); //se envia el mensaje en la hiperterminal 
0131:  MOVLW  20
0132:  BSF    03.6
0133:  MOVWF  0D
0134:  MOVLW  00
0135:  MOVWF  0F
0136:  BCF    03.6
0137:  CALL   088
....................       delay_ms(1000); // se hace una espera de 1 segundo 
0138:  MOVLW  04
0139:  MOVWF  24
013A:  MOVLW  FA
013B:  MOVWF  25
013C:  CALL   0E0
013D:  DECFSZ 24,F
013E:  GOTO   13A
....................     } 
013F:  GOTO   225
....................     else if (c == '2'){ //SE TECLEA 2: 
0140:  MOVF   21,W
0141:  SUBLW  32
0142:  BTFSS  03.2
0143:  GOTO   173
....................       output_b(0x00); //se pone en 0  
0144:  BSF    03.5
0145:  CLRF   06
0146:  BCF    03.5
0147:  CLRF   06
....................       printf(" Corrimiento hacia la derecha \n\r"); //se envia el mensaje en la hiperterminal 
0148:  MOVLW  2F
0149:  BSF    03.6
014A:  MOVWF  0D
014B:  MOVLW  00
014C:  MOVWF  0F
014D:  BCF    03.6
014E:  CALL   088
....................       dato = 0x01; //ASIGNAMOS DÓNDE COMENZARÁ EL CORRIMIENTO 
014F:  MOVLW  01
0150:  MOVWF  22
....................       output_b(dato); //ASIGNAMOS EL DATO AL PUERTO B 
0151:  BSF    03.5
0152:  CLRF   06
0153:  BCF    03.5
0154:  MOVF   22,W
0155:  MOVWF  06
....................       delay_ms(500); // se hace una espera de 1 segundo 
0156:  MOVLW  02
0157:  MOVWF  24
0158:  MOVLW  FA
0159:  MOVWF  25
015A:  CALL   0E0
015B:  DECFSZ 24,F
015C:  GOTO   158
....................       for (i=0; i<7;i++){ //CICLO PARA EL CORRIMIENTO 
015D:  CLRF   23
015E:  MOVF   23,W
015F:  SUBLW  06
0160:  BTFSS  03.0
0161:  GOTO   172
....................           dato = (dato<<1); //HACEMOS UN CORRIMIENTO A LA DERECHA 
0162:  BCF    03.0
0163:  RLF    22,F
....................           output_b(dato); //ASIGNAMOS EL DATO AL PUERTO B 
0164:  BSF    03.5
0165:  CLRF   06
0166:  BCF    03.5
0167:  MOVF   22,W
0168:  MOVWF  06
....................           delay_ms(500); // se hace una espera de 1 segundo 
0169:  MOVLW  02
016A:  MOVWF  24
016B:  MOVLW  FA
016C:  MOVWF  25
016D:  CALL   0E0
016E:  DECFSZ 24,F
016F:  GOTO   16B
0170:  INCF   23,F
0171:  GOTO   15E
....................       } 
....................        
....................     } 
0172:  GOTO   225
....................     else if (c == '3'){ //SE TECLEA 3: 
0173:  MOVF   21,W
0174:  SUBLW  33
0175:  BTFSS  03.2
0176:  GOTO   1A6
....................       output_b(0x00); //se pone en 0  
0177:  BSF    03.5
0178:  CLRF   06
0179:  BCF    03.5
017A:  CLRF   06
....................       printf(" Corrimiento hacia la izquierda \n\r"); //se envia el mensaje en la hiperterminal 
017B:  MOVLW  40
017C:  BSF    03.6
017D:  MOVWF  0D
017E:  MOVLW  00
017F:  MOVWF  0F
0180:  BCF    03.6
0181:  CALL   088
....................       dato = 0x80; //ASIGNAMOS DÓNDE COMENZARÁ EL CORRIMIENTO 
0182:  MOVLW  80
0183:  MOVWF  22
....................       output_b(dato); //ASIGNAMOS EL DATO AL PUERTO B 
0184:  BSF    03.5
0185:  CLRF   06
0186:  BCF    03.5
0187:  MOVF   22,W
0188:  MOVWF  06
....................       delay_ms(500); // se hace una espera de 1 segundo 
0189:  MOVLW  02
018A:  MOVWF  24
018B:  MOVLW  FA
018C:  MOVWF  25
018D:  CALL   0E0
018E:  DECFSZ 24,F
018F:  GOTO   18B
....................       for (i=0; i<7;i++){ //CICLO PARA EL CORRIMIENTO 
0190:  CLRF   23
0191:  MOVF   23,W
0192:  SUBLW  06
0193:  BTFSS  03.0
0194:  GOTO   1A5
....................           dato = (dato>>1); //HACEMOS UN CORRIMIENTO A LA IZQUIERDA 
0195:  BCF    03.0
0196:  RRF    22,F
....................           output_b(dato); //ASIGNAMOS EL DATO AL PUERTO B 
0197:  BSF    03.5
0198:  CLRF   06
0199:  BCF    03.5
019A:  MOVF   22,W
019B:  MOVWF  06
....................           delay_ms(500); // se hace una espera de 1 segundo 
019C:  MOVLW  02
019D:  MOVWF  24
019E:  MOVLW  FA
019F:  MOVWF  25
01A0:  CALL   0E0
01A1:  DECFSZ 24,F
01A2:  GOTO   19E
01A3:  INCF   23,F
01A4:  GOTO   191
....................       } 
....................     } 
01A5:  GOTO   225
....................     else if (c == '4'){ //SE TECLEA 4: 
01A6:  MOVF   21,W
01A7:  SUBLW  34
01A8:  BTFSS  03.2
01A9:  GOTO   1FC
....................       output_b(0x00); //se pone en 0  
01AA:  BSF    03.5
01AB:  CLRF   06
01AC:  BCF    03.5
01AD:  CLRF   06
....................       printf(" Corrimiento hacia la derecha y a la izquierda \n\r"); //se envia el mensaje en la hiperterminal 
01AE:  MOVLW  52
01AF:  BSF    03.6
01B0:  MOVWF  0D
01B1:  MOVLW  00
01B2:  MOVWF  0F
01B3:  BCF    03.6
01B4:  CALL   088
....................        
....................       dato = 0x01; //ASIGNAMOS DÓNDE COMENZARÁ EL CORRIMIENTO 
01B5:  MOVLW  01
01B6:  MOVWF  22
....................       output_b(dato); //ASIGNAMOS EL DATO AL PUERTO B 
01B7:  BSF    03.5
01B8:  CLRF   06
01B9:  BCF    03.5
01BA:  MOVF   22,W
01BB:  MOVWF  06
....................       delay_ms(500); // se hace una espera de 1 segundo 
01BC:  MOVLW  02
01BD:  MOVWF  24
01BE:  MOVLW  FA
01BF:  MOVWF  25
01C0:  CALL   0E0
01C1:  DECFSZ 24,F
01C2:  GOTO   1BE
....................       for (i=0; i<7;i++){ //CICLO PARA EL CORRIMIENTO 
01C3:  CLRF   23
01C4:  MOVF   23,W
01C5:  SUBLW  06
01C6:  BTFSS  03.0
01C7:  GOTO   1D8
....................           dato = (dato<<1); //HACEMOS UN CORRIMIENTO A LA DERECHA 
01C8:  BCF    03.0
01C9:  RLF    22,F
....................           output_b(dato); //ASIGNAMOS EL DATO AL PUERTO B 
01CA:  BSF    03.5
01CB:  CLRF   06
01CC:  BCF    03.5
01CD:  MOVF   22,W
01CE:  MOVWF  06
....................           delay_ms(500); // se hace una espera de 1 segundo 
01CF:  MOVLW  02
01D0:  MOVWF  24
01D1:  MOVLW  FA
01D2:  MOVWF  25
01D3:  CALL   0E0
01D4:  DECFSZ 24,F
01D5:  GOTO   1D1
01D6:  INCF   23,F
01D7:  GOTO   1C4
....................       } 
....................       dato = 0x80; //ASIGNAMOS DÓNDE COMENZARÁ EL CORRIMIENTO 
01D8:  MOVLW  80
01D9:  MOVWF  22
....................       output_b(dato); //ASIGNAMOS EL DATO AL PUERTO B 
01DA:  BSF    03.5
01DB:  CLRF   06
01DC:  BCF    03.5
01DD:  MOVF   22,W
01DE:  MOVWF  06
....................           delay_ms(500); // se hace una espera de 1 segundo 
01DF:  MOVLW  02
01E0:  MOVWF  24
01E1:  MOVLW  FA
01E2:  MOVWF  25
01E3:  CALL   0E0
01E4:  DECFSZ 24,F
01E5:  GOTO   1E1
....................       for (i=0; i<7;i++){ //CICLO PARA EL CORRIMIENTO 
01E6:  CLRF   23
01E7:  MOVF   23,W
01E8:  SUBLW  06
01E9:  BTFSS  03.0
01EA:  GOTO   1FB
....................           dato = (dato>>1); //HACEMOS UN CORRIMIENTO A LA IZQUIERDA 
01EB:  BCF    03.0
01EC:  RRF    22,F
....................           output_b(dato); //ASIGNAMOS EL DATO AL PUERTO B 
01ED:  BSF    03.5
01EE:  CLRF   06
01EF:  BCF    03.5
01F0:  MOVF   22,W
01F1:  MOVWF  06
....................           delay_ms(500); // se hace una espera de 1 segundo 
01F2:  MOVLW  02
01F3:  MOVWF  24
01F4:  MOVLW  FA
01F5:  MOVWF  25
01F6:  CALL   0E0
01F7:  DECFSZ 24,F
01F8:  GOTO   1F4
01F9:  INCF   23,F
01FA:  GOTO   1E7
....................       } 
....................     } 
01FB:  GOTO   225
....................     else if (c == '5'){ //SE TECLEA 5: 
01FC:  MOVF   21,W
01FD:  SUBLW  35
01FE:  BTFSS  03.2
01FF:  GOTO   225
....................       output_b(0xFF); //se pone en 0  
0200:  BSF    03.5
0201:  CLRF   06
0202:  MOVLW  FF
0203:  BCF    03.5
0204:  MOVWF  06
....................       printf(" Todos los bits encendidos \n\r"); //se envia el mensaje en la hiperterminal 
0205:  MOVLW  6B
0206:  BSF    03.6
0207:  MOVWF  0D
0208:  MOVLW  00
0209:  MOVWF  0F
020A:  BCF    03.6
020B:  CALL   088
....................       delay_ms(1000); // se hace una espera de 1 segundo 
020C:  MOVLW  04
020D:  MOVWF  24
020E:  MOVLW  FA
020F:  MOVWF  25
0210:  CALL   0E0
0211:  DECFSZ 24,F
0212:  GOTO   20E
....................       output_b(0x00); //se pone en 0  
0213:  BSF    03.5
0214:  CLRF   06
0215:  BCF    03.5
0216:  CLRF   06
....................       printf(" Todos los leds apagados \n\r"); //se envia el mensaje en la hiperterminal 
0217:  MOVLW  7A
0218:  BSF    03.6
0219:  MOVWF  0D
021A:  MOVLW  00
021B:  MOVWF  0F
021C:  BCF    03.6
021D:  CALL   088
....................       delay_ms(1000);// se hace una espera de 1 segundo 
021E:  MOVLW  04
021F:  MOVWF  24
0220:  MOVLW  FA
0221:  MOVWF  25
0222:  CALL   0E0
0223:  DECFSZ 24,F
0224:  GOTO   220
....................     } 
0225:  BSF    03.5
0226:  GOTO   105
....................    
....................   }//while 
.................... }//main 
0227:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
