CCS PCM C Compiler, Version 5.015, 5967               02-jun.-24 16:40

               Filename:   C:\Users\Alexis\Documents\GitHub\PIC16F877A\Prácticas\Práctica08\e7\ejercicio7.lst

               ROM used:   556 words (7%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           23 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   1DD
0003:  NOP
.................... #include <16F877.h> 
.................... //////////// Standard Header file for the PIC16F877 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877 
0004:  DATA 25,32
0005:  DATA 20,32
0006:  DATA 20,10
0007:  DATA 20,00
0008:  DATA 25,2C
0009:  DATA 20,34
000A:  DATA 20,10
000B:  DATA 20,00
*
00C9:  MOVF   29,W
00CA:  CLRF   78
00CB:  SUBWF  28,W
00CC:  BTFSC  03.0
00CD:  GOTO   0D1
00CE:  MOVF   28,W
00CF:  MOVWF  77
00D0:  GOTO   0DD
00D1:  CLRF   77
00D2:  MOVLW  08
00D3:  MOVWF  2A
00D4:  RLF    28,F
00D5:  RLF    77,F
00D6:  MOVF   29,W
00D7:  SUBWF  77,W
00D8:  BTFSC  03.0
00D9:  MOVWF  77
00DA:  RLF    78,F
00DB:  DECFSZ 2A,F
00DC:  GOTO   0D4
00DD:  RETURN
*
010A:  MOVLW  20
010B:  BTFSS  23.4
010C:  MOVLW  30
010D:  MOVWF  24
010E:  MOVF   22,W
010F:  MOVWF  77
0110:  BTFSS  22.7
0111:  GOTO   11A
0112:  COMF   77,F
0113:  INCF   77,F
0114:  MOVF   77,W
0115:  MOVWF  22
0116:  MOVLW  2D
0117:  MOVWF  24
0118:  BSF    23.7
0119:  BSF    23.0
011A:  MOVF   22,W
011B:  MOVWF  28
011C:  MOVLW  64
011D:  MOVWF  29
011E:  CALL   0C9
011F:  MOVF   77,W
0120:  MOVWF  22
0121:  MOVLW  30
0122:  ADDWF  78,W
0123:  MOVWF  25
0124:  MOVF   22,W
0125:  MOVWF  28
0126:  MOVLW  0A
0127:  MOVWF  29
0128:  CALL   0C9
0129:  MOVLW  30
012A:  ADDWF  77,W
012B:  MOVWF  27
012C:  MOVLW  30
012D:  ADDWF  78,W
012E:  MOVWF  26
012F:  MOVF   24,W
0130:  MOVWF  77
0131:  MOVLW  30
0132:  SUBWF  25,W
0133:  BTFSC  03.2
0134:  GOTO   139
0135:  BSF    23.1
0136:  BTFSC  23.7
0137:  BSF    23.2
0138:  GOTO   14D
0139:  MOVF   24,W
013A:  MOVWF  25
013B:  MOVLW  20
013C:  MOVWF  24
013D:  MOVLW  30
013E:  SUBWF  26,W
013F:  BTFSC  03.2
0140:  GOTO   145
0141:  BSF    23.0
0142:  BTFSC  23.7
0143:  BSF    23.1
0144:  GOTO   14D
0145:  BTFSS  03.2
0146:  BSF    23.0
0147:  BTFSS  03.2
0148:  GOTO   14D
0149:  MOVF   25,W
014A:  MOVWF  26
014B:  MOVLW  20
014C:  MOVWF  25
014D:  BTFSC  23.2
014E:  GOTO   154
014F:  BTFSC  23.1
0150:  GOTO   157
0151:  BTFSC  23.0
0152:  GOTO   15A
0153:  GOTO   15D
0154:  MOVF   24,W
0155:  MOVWF  28
0156:  CALL   0DE
0157:  MOVF   25,W
0158:  MOVWF  28
0159:  CALL   0DE
015A:  MOVF   26,W
015B:  MOVWF  28
015C:  CALL   0DE
015D:  MOVF   27,W
015E:  MOVWF  28
015F:  CALL   0DE
0160:  BCF    0A.3
0161:  BCF    0A.4
0162:  GOTO   209 (RETURN)
0163:  MOVF   0B,W
0164:  MOVWF  23
0165:  BCF    0B.7
0166:  BSF    03.5
0167:  BSF    03.6
0168:  BSF    0C.7
0169:  BSF    0C.0
016A:  NOP
016B:  NOP
016C:  BCF    03.5
016D:  BCF    03.6
016E:  BTFSC  23.7
016F:  BSF    0B.7
0170:  BTFSC  03.0
0171:  GOTO   19A
0172:  BSF    03.6
0173:  MOVF   0C,W
0174:  ANDLW  7F
0175:  BCF    03.6
0176:  MOVWF  23
0177:  BSF    03.6
0178:  MOVF   0D,W
0179:  BCF    03.6
017A:  MOVWF  24
017B:  BSF    03.6
017C:  MOVF   0F,W
017D:  BCF    03.6
017E:  MOVWF  25
017F:  MOVF   23,W
0180:  MOVWF  28
0181:  CALL   0DE
0182:  MOVF   24,W
0183:  BSF    03.6
0184:  MOVWF  0D
0185:  BCF    03.6
0186:  MOVF   25,W
0187:  BSF    03.6
0188:  MOVWF  0F
0189:  BCF    03.6
018A:  MOVF   0B,W
018B:  MOVWF  26
018C:  BCF    0B.7
018D:  BSF    03.5
018E:  BSF    03.6
018F:  BSF    0C.7
0190:  BSF    0C.0
0191:  NOP
0192:  NOP
0193:  BCF    03.5
0194:  BCF    03.6
0195:  BTFSC  26.7
0196:  BSF    0B.7
0197:  DECFSZ 22,F
0198:  GOTO   19A
0199:  GOTO   1B9
019A:  BSF    03.6
019B:  RLF    0C,W
019C:  RLF    0E,W
019D:  ANDLW  7F
019E:  BCF    03.6
019F:  MOVWF  23
01A0:  BSF    03.6
01A1:  MOVF   0D,W
01A2:  BCF    03.6
01A3:  MOVWF  24
01A4:  BSF    03.6
01A5:  MOVF   0F,W
01A6:  BCF    03.6
01A7:  MOVWF  25
01A8:  MOVF   23,W
01A9:  MOVWF  28
01AA:  CALL   0DE
01AB:  MOVF   24,W
01AC:  BSF    03.6
01AD:  MOVWF  0D
01AE:  BCF    03.6
01AF:  MOVF   25,W
01B0:  BSF    03.6
01B1:  MOVWF  0F
01B2:  INCF   0D,F
01B3:  BTFSC  03.2
01B4:  INCF   0F,F
01B5:  BCF    03.0
01B6:  BCF    03.6
01B7:  DECFSZ 22,F
01B8:  GOTO   163
01B9:  RETURN
01BA:  BTFSC  23.7
01BB:  GOTO   1CC
01BC:  MOVLW  0F
01BD:  MOVWF  77
01BE:  SWAPF  22,W
01BF:  ANDWF  77,F
01C0:  MOVLW  0A
01C1:  SUBWF  77,W
01C2:  BTFSC  03.0
01C3:  GOTO   1C7
01C4:  MOVLW  30
01C5:  ADDWF  77,F
01C6:  GOTO   1C9
01C7:  MOVF   23,W
01C8:  ADDWF  77,F
01C9:  MOVF   77,W
01CA:  MOVWF  28
01CB:  CALL   0DE
01CC:  MOVLW  0F
01CD:  ANDWF  22,F
01CE:  MOVLW  0A
01CF:  SUBWF  22,W
01D0:  BTFSC  03.0
01D1:  GOTO   1D4
01D2:  MOVLW  30
01D3:  GOTO   1D6
01D4:  BCF    23.7
01D5:  MOVF   23,W
01D6:  ADDWF  22,F
01D7:  MOVF   22,W
01D8:  MOVWF  28
01D9:  CALL   0DE
01DA:  BCF    0A.3
01DB:  BCF    0A.4
01DC:  GOTO   21D (RETURN)
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(clock=20000000) 
*
000C:  MOVLW  29
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   01F
0012:  MOVLW  06
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  7B
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   012
001F:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
003D:  MOVLW  0F
003E:  BSF    03.5
003F:  ANDWF  08,W
0040:  IORLW  F0
0041:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0042:  BCF    03.5
0043:  BSF    08.2
....................    delay_cycles(1); 
0044:  NOP
....................    lcd_output_enable(1); 
0045:  BSF    08.0
....................    delay_cycles(1); 
0046:  NOP
....................    high = lcd_read_nibble(); 
0047:  CALL   031
0048:  MOVF   78,W
0049:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
004A:  BCF    08.0
....................    delay_cycles(1); 
004B:  NOP
....................    lcd_output_enable(1); 
004C:  BSF    08.0
....................    delay_us(1); 
004D:  GOTO   04E
004E:  GOTO   04F
004F:  NOP
....................    low = lcd_read_nibble(); 
0050:  CALL   031
0051:  MOVF   78,W
0052:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
0053:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0054:  MOVLW  0F
0055:  BSF    03.5
0056:  ANDWF  08,W
0057:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0058:  BCF    03.5
0059:  SWAPF  30,W
005A:  MOVWF  77
005B:  MOVLW  F0
005C:  ANDWF  77,F
005D:  MOVF   77,W
005E:  IORWF  2F,W
005F:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0031:  MOVF   08,W
0032:  MOVWF  77
0033:  SWAPF  08,W
0034:  ANDLW  0F
0035:  MOVWF  78
....................   #endif 
0036:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0020:  SWAPF  30,W
0021:  ANDLW  F0
0022:  MOVWF  77
0023:  MOVLW  0F
0024:  ANDWF  08,W
0025:  IORWF  77,W
0026:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0027:  NOP
....................    lcd_output_enable(1); 
0028:  BSF    08.0
....................    delay_us(2); 
0029:  MOVLW  02
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  GOTO   02E
002E:  NOP
....................    lcd_output_enable(0); 
002F:  BCF    08.0
0030:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0037:  BSF    03.5
0038:  BCF    08.0
....................    lcd_rs_tris(); 
0039:  BCF    08.1
....................    lcd_rw_tris(); 
003A:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
003B:  BCF    03.5
003C:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0060:  MOVF   78,W
0061:  MOVWF  2F
0062:  BTFSC  2F.7
0063:  GOTO   03D
....................    lcd_output_rs(address); 
0064:  BTFSS  2D.0
0065:  BCF    08.1
0066:  BTFSC  2D.0
0067:  BSF    08.1
....................    delay_cycles(1); 
0068:  NOP
....................    lcd_output_rw(0); 
0069:  BCF    08.2
....................    delay_cycles(1); 
006A:  NOP
....................    lcd_output_enable(0); 
006B:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
006C:  SWAPF  2E,W
006D:  MOVWF  2F
006E:  MOVLW  0F
006F:  ANDWF  2F,F
0070:  MOVF   2F,W
0071:  MOVWF  30
0072:  CALL   020
....................    lcd_send_nibble(n & 0xf); 
0073:  MOVF   2E,W
0074:  ANDLW  0F
0075:  MOVWF  2F
0076:  MOVWF  30
0077:  CALL   020
0078:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
0079:  MOVLW  28
007A:  MOVWF  23
007B:  MOVLW  0C
007C:  MOVWF  24
007D:  MOVLW  01
007E:  MOVWF  25
007F:  MOVLW  06
0080:  MOVWF  26
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
0081:  BCF    08.0
....................    lcd_output_rs(0); 
0082:  BCF    08.1
....................    lcd_output_rw(0); 
0083:  BCF    08.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0084:  MOVLW  0F
0085:  BSF    03.5
0086:  ANDWF  08,W
0087:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0088:  BCF    08.0
....................    lcd_rs_tris(); 
0089:  BCF    08.1
....................    lcd_rw_tris(); 
008A:  BCF    08.2
....................  #endif 
....................      
....................    delay_ms(15); 
008B:  MOVLW  0F
008C:  BCF    03.5
008D:  MOVWF  29
008E:  CALL   00C
....................    for(i=1;i<=3;++i) 
008F:  MOVLW  01
0090:  MOVWF  22
0091:  MOVF   22,W
0092:  SUBLW  03
0093:  BTFSS  03.0
0094:  GOTO   09D
....................    { 
....................        lcd_send_nibble(3); 
0095:  MOVLW  03
0096:  MOVWF  30
0097:  CALL   020
....................        delay_ms(5); 
0098:  MOVLW  05
0099:  MOVWF  29
009A:  CALL   00C
009B:  INCF   22,F
009C:  GOTO   091
....................    } 
....................     
....................    lcd_send_nibble(2); 
009D:  MOVLW  02
009E:  MOVWF  30
009F:  CALL   020
....................    delay_ms(5); 
00A0:  MOVLW  05
00A1:  MOVWF  29
00A2:  CALL   00C
....................    for(i=0;i<=3;++i) 
00A3:  CLRF   22
00A4:  MOVF   22,W
00A5:  SUBLW  03
00A6:  BTFSS  03.0
00A7:  GOTO   0B4
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A8:  MOVLW  23
00A9:  ADDWF  22,W
00AA:  MOVWF  04
00AB:  BCF    03.7
00AC:  MOVF   00,W
00AD:  MOVWF  27
00AE:  CLRF   2D
00AF:  MOVF   27,W
00B0:  MOVWF  2E
00B1:  CALL   037
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00B2:  INCF   22,F
00B3:  GOTO   0A4
00B4:  BCF    0A.3
00B5:  BCF    0A.4
00B6:  GOTO   1E8 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B7:  DECFSZ 2A,W
00B8:  GOTO   0BA
00B9:  GOTO   0BD
....................       address=LCD_LINE_TWO; 
00BA:  MOVLW  40
00BB:  MOVWF  2B
00BC:  GOTO   0BE
....................    else 
....................       address=0; 
00BD:  CLRF   2B
....................       
....................    address+=x-1; 
00BE:  MOVLW  01
00BF:  SUBWF  29,W
00C0:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address); 
00C1:  MOVF   2B,W
00C2:  IORLW  80
00C3:  MOVWF  2C
00C4:  CLRF   2D
00C5:  MOVF   2C,W
00C6:  MOVWF  2E
00C7:  CALL   037
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C8:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
00DE:  MOVF   28,W
00DF:  XORLW  07
00E0:  BTFSC  03.2
00E1:  GOTO   0EC
00E2:  XORLW  0B
00E3:  BTFSC  03.2
00E4:  GOTO   0F1
00E5:  XORLW  06
00E6:  BTFSC  03.2
00E7:  GOTO   0F9
00E8:  XORLW  02
00E9:  BTFSC  03.2
00EA:  GOTO   0FF
00EB:  GOTO   104
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00EC:  MOVLW  01
00ED:  MOVWF  29
00EE:  MOVWF  2A
00EF:  CALL   0B7
00F0:  GOTO   109
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00F1:  CLRF   2D
00F2:  MOVLW  01
00F3:  MOVWF  2E
00F4:  CALL   037
....................                      delay_ms(2); 
00F5:  MOVLW  02
00F6:  MOVWF  29
00F7:  CALL   00C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00F8:  GOTO   109
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00F9:  MOVLW  01
00FA:  MOVWF  29
00FB:  MOVLW  02
00FC:  MOVWF  2A
00FD:  CALL   0B7
00FE:  GOTO   109
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00FF:  CLRF   2D
0100:  MOVLW  10
0101:  MOVWF  2E
0102:  CALL   037
0103:  GOTO   109
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0104:  MOVLW  01
0105:  MOVWF  2D
0106:  MOVF   28,W
0107:  MOVWF  2E
0108:  CALL   037
....................      #endif 
....................    } 
0109:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... int counter; 
....................  
.................... void main() { 
*
01DD:  MOVF   03,W
01DE:  ANDLW  1F
01DF:  MOVWF  03
01E0:  BSF    03.5
01E1:  BSF    1F.0
01E2:  BSF    1F.1
01E3:  BSF    1F.2
01E4:  BCF    1F.3
01E5:  BCF    03.7
....................    
....................     lcd_init();      //Inicializamos el LCD 
01E6:  BCF    03.5
01E7:  GOTO   079
....................        
....................     while( TRUE ) { 
....................     int var = input_a();     
01E8:  MOVLW  FF
01E9:  BSF    03.5
01EA:  MOVWF  05
01EB:  BCF    03.5
01EC:  MOVF   05,W
01ED:  MOVWF  21
....................     if(var != 0){ 
01EE:  MOVF   21,F
01EF:  BTFSC  03.2
01F0:  GOTO   1FF
....................       counter++; 
01F1:  INCF   20,F
....................       while(var != 0){ 
01F2:  MOVF   21,F
01F3:  BTFSC  03.2
01F4:  GOTO   1FF
....................          var = input_a(); 
01F5:  MOVLW  FF
01F6:  BSF    03.5
01F7:  MOVWF  05
01F8:  BCF    03.5
01F9:  MOVF   05,W
01FA:  MOVWF  21
....................          delay_ms(10); 
01FB:  MOVLW  0A
01FC:  MOVWF  29
01FD:  CALL   00C
01FE:  GOTO   1F2
....................       }    
....................     } 
....................     lcd_gotoxy(5,1); 
01FF:  MOVLW  05
0200:  MOVWF  29
0201:  MOVLW  01
0202:  MOVWF  2A
0203:  CALL   0B7
....................     printf(lcd_putc,"%d d   ", counter); //Mostramos el contador en decimal 
0204:  MOVF   20,W
0205:  MOVWF  22
0206:  MOVLW  18
0207:  MOVWF  23
0208:  GOTO   10A
0209:  MOVLW  05
020A:  BSF    03.6
020B:  MOVWF  0D
020C:  MOVLW  00
020D:  MOVWF  0F
020E:  BCF    03.0
020F:  MOVLW  05
0210:  BCF    03.6
0211:  MOVWF  22
0212:  CALL   163
....................     lcd_gotoxy(5,2); 
0213:  MOVLW  05
0214:  MOVWF  29
0215:  MOVLW  02
0216:  MOVWF  2A
0217:  CALL   0B7
....................     printf(lcd_putc,"%X h   ", counter); //Mostramos el contador en hexadecimal 
0218:  MOVF   20,W
0219:  MOVWF  22
021A:  MOVLW  37
021B:  MOVWF  23
021C:  GOTO   1BA
021D:  MOVLW  09
021E:  BSF    03.6
021F:  MOVWF  0D
0220:  MOVLW  00
0221:  MOVWF  0F
0222:  BCF    03.0
0223:  MOVLW  05
0224:  BCF    03.6
0225:  MOVWF  22
0226:  CALL   163
....................     delay_ms(200); 
0227:  MOVLW  C8
0228:  MOVWF  29
0229:  CALL   00C
022A:  GOTO   1E8
....................     } 
....................  } 
....................  
022B:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
